name: Manually Triggered Workflow
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: false
        default: 'warning'
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'staging'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Scan Code
        uses: docker://aquasec/aqua-scanner
        with:
          # adding credentials to use aqua registry for trivy db download instead of ghcr to avoid rate limit issues
          args: trivy fs --scanners misconfig,vuln,secret,license --sast --reachability --db-repository=registry.aquasec.com/trivy-db:2 --checks-bundle-repository=registry.aquasec.com/trivy-checks:1 --java-db-repository=registry.aquasec.com/trivy-java-db:1 .
          # To customize what security issues to detect (vuln,misconfig,secret,license)
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable reachability scanning, add: --reachability
          # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
          # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ github.token }}
          AQUA_URL: https://api.eu-1.supply-chain.cloud.aquasec.com
          CSPM_URL: https://eu-1.api.cloudsploit.com
          TRIVY_RUN_AS_PLUGIN: 'aqua'
          TRIVY_USERNAME: ${{ secrets.AQUA_REG_USER }}
          TRIVY_PASSWORD: ${{ secrets.AQUA_REG_PW }}
          # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)

      - name: Build Docker Image
        run: docker build -t "${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }}" .
        # specify tag once registry/repo are known/ready; tag remains run number

      - name: Test Image
        run: echo "Tests passed."

      - name: Scan Image
        env:
          AQUA_REG_USER: ${{ secrets.AQUA_REG_USER }}
          AQUA_REG_PW: ${{ secrets.AQUA_REG_PW }}
          SCANNER_TOKEN: ${{ secrets.SCANNER_TOKEN }}
        # using container scanner:
        run: |
          docker login registry.aquasec.com -u ${{ secrets.AQUA_REG_USER }} -p ${{ secrets.AQUA_REG_PW }}
          docker run -v /var/run/docker.sock:/var/run/docker.sock registry.aquasec.com/scanner:latest-saas scan -H https://3772126de8.cloud.aquasec.com/ -A ${{ secrets.SCANNER_TOKEN }} --local ${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }} --socket docker
        # alternatively, using CLI scanner:
        # run: |
        #   wget --user ${{ secrets.AQUA_REG_USER }} --password ${{ secrets.AQUA_REG_PW }} https://download.aquasec.com/scanner/2022.4.720/scannercli
        #   chmod +x scannercli
        #   sudo mkdir /opt/aquascans
        #   sudo ./scannercli scan -A ${{ secrets.SCANNER_TOKEN }} -H https://3772126de8.cloud.aquasec.com/ ${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }} --local

      - name: Manifest Generation
        run: |
          export BILLY_SERVER=https://billy.eu-1.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum --check; then
          echo "install.sh checksum failed"
            exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ secrets.GITHUB_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --cspm-url https://eu-1.api.cloudsploit.com \
            # --artifact-path "docker.io/$GITHUB_REPOSITORY:$GITHUB_RUN_NUMBER" 
            --artifact-path "${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }}" 

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            # --artifact-path "${{env.MY_APP_ROOT}}"

      - name: Tag image with Registry
        # env:
        run: docker tag ${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }} quay.io/mmurhamm/${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }}

      - name: Push to Registry
        # env:
        #   QUAY_USER: ${{ secrets.QUAY_USER }}
        #   QUAY_PW: ${{ secrets.QUAY_PW }}
        run: echo "docker push quay.io/mmurhamm/${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }} ..."
        # |
        # docker login registry.aquasec.com -u ${{ secrets.QUAY_USER }} -p ${{ secrets.QUAY_PW }}
        # docker push quay.io/mmurhamm:${{ github.sha }}

      - name: Deploy to Kubernetes
        # see if helm is installed on runner
        run: helm version
        # echo "helm install ... quay.io/mmurhamm/${{ GITHUB_REPOSITORY }}:${{ GITHUB_RUN_NUMBER }} ..."
        # add helm later ...
